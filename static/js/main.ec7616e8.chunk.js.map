{"version":3,"sources":["Components/Input.tsx","Components/UnitSelector.tsx","App.tsx","index.tsx"],"names":["inputRef","selectRef","Input","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isNaN","_this2","onInputChange","showNaNError","react_default","a","createElement","className","ref","type","placeholder","concat","onKeyUp","value","length","parseInt","setState","style","marginTop","Component","UnitSelector","_this$props","title","selected","onChange","_onChange","apply","arguments","toString","UnitsInKM","Football Fields","Kilometer","Manhattans","Road Islands","AU","App","onInputValueChanged","newValue","inputValue","onConvertFromChanged","convertFrom","onConvertToChanged","convertTo","_this$state","_this$state$inputValu","height","styles","input","Components_Input","Components_UnitSelector","href","marginBottom","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.ec7616e8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\ninterface Props {\n  onInputChange?: (newValue: number) => void;\n}\n\ninterface State {\n  isNaN: boolean;\n}\n\nlet inputRef: HTMLInputElement | null;\n\nclass Input extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      isNaN: false\n    };\n  }\n\n  render() {\n    const { onInputChange } = this.props;\n    const { isNaN: showNaNError } = this.state;\n\n    return (\n      <div className=\"nes-field\">\n        <label>Value</label>\n        <input\n          ref={ref => (inputRef = ref)}\n          type=\"text\"\n          placeholder=\"Some really big number...\"\n          className={`nes-input ${showNaNError ? \"is-error\" : \"\"}`}\n          onKeyUp={() => {\n            if (inputRef) {\n              if (inputRef.value.length && isNaN(parseInt(inputRef.value))) {\n                this.setState({ isNaN: true });\n              } else {\n                let value: number = parseInt(inputRef.value);\n                this.setState({ isNaN: false });\n                if (onInputChange) onInputChange(value || -1);\n              }\n            }\n          }}\n        />\n        {showNaNError && (\n          <span className=\"nes-text is-error\" style={{ marginTop: 10 }}>\n            No number provided! The input must be a number!\n          </span>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Input;\n","import React, { Component } from \"react\";\n\nexport type Unit =\n  | \"Football Fields\"\n  | \"Kilometer\"\n  | \"Manhattans\"\n  | \"Road Islands\"\n  | \"AU\";\n\ninterface Props {\n  title: \"Convert From\" | \"Convert To\";\n  selected: Unit;\n  onChange: (newValue: Unit) => void;\n}\n\nlet selectRef: HTMLSelectElement | null;\n\nclass UnitSelector extends Component<Props> {\n  constructor(props: Props) {\n    super(props);\n  }\n\n  render() {\n    const { title, selected, onChange } = this.props;\n\n    return (\n      <div>\n        <label>{title}</label>\n        <div className=\"nes-select\">\n          <select\n            ref={ref => (selectRef = ref)}\n            onChange={() => {\n              if (selectRef) onChange((selectRef.value as Unit) || \"Kilometer\");\n            }}\n            value={selected}\n          >\n            <option value=\"Football Fields\">Football Fields</option>\n            <option value=\"Kilometer\">Kilometer</option>\n            <option value=\"Manhattans\">Manhattans</option>\n            <option value=\"Road Islands\">Road Islands</option>\n            <option value=\"AU\">AU</option>\n          </select>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default UnitSelector;\n","import React, { Component } from \"react\";\nimport { Input, UnitSelector } from \"./Components\";\nimport { Unit } from \"./Components/UnitSelector\";\n\nconst UnitsInKM = {\n  \"Football Fields\": 0.09144,\n  Kilometer: 1,\n  Manhattans: 21.6,\n  \"Road Islands\": 4000,\n  AU: 149597900\n};\n\ninterface Props {}\n\ninterface State {\n  inputValue?: number;\n  convertFrom: Unit;\n  convertTo: Unit;\n}\n\nclass App extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      convertFrom: \"Football Fields\",\n      convertTo: \"Road Islands\"\n    };\n  }\n\n  onInputValueChanged = (newValue: number) => {\n    this.setState({ inputValue: newValue });\n  };\n\n  onConvertFromChanged = (newValue: Unit) => {\n    this.setState({ convertFrom: newValue });\n  };\n\n  onConvertToChanged = (newValue: Unit) => {\n    this.setState({ convertTo: newValue });\n  };\n\n  render() {\n    const { inputValue = -1, convertFrom, convertTo } = this.state;\n\n    return (\n      <div className=\"nes-container\" style={{ height: \"100vh\" }}>\n        <h1>AU Units</h1>\n        <p>The simple way to convert to and from AU Units.</p>\n        <div style={styles.input}>\n          <Input onInputChange={this.onInputValueChanged} />\n        </div>\n        <div style={styles.input}>\n          <UnitSelector\n            title=\"Convert From\"\n            onChange={this.onConvertFromChanged}\n            selected={convertFrom}\n          />\n        </div>\n        <div style={styles.input}>\n          <UnitSelector\n            title=\"Convert To\"\n            onChange={this.onConvertToChanged}\n            selected={convertTo}\n          />\n        </div>\n        {inputValue > -1 && (\n          <h3 style={{ marginTop: 20 }}>\n            Output:\n            {(UnitsInKM[convertFrom] * inputValue) / UnitsInKM[convertTo]}\n          </h3>\n        )}\n        <a\n          href=\"https://github.com/ajchili/au-units/issues\"\n          className=\"nes-btn is-warning\"\n          style={styles.input}\n        >\n          Are some values missing?\n        </a>\n      </div>\n    );\n  }\n}\n\nconst styles = {\n  input: {\n    marginTop: 10,\n    marginBottom: 10\n  }\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"../node_modules/nes.css/css/nes.min.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}